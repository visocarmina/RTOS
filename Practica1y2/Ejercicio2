int periodo = 500;
int msj = 0;
String inString;

#if CONFIG_FREERTOS_UNICORE
  static const BaseType_t app_cpu = 0;
#else
  static const BaseType_t app_cpu = 1;
#endif

  //Gestion de tareas
  static TaskHandle_t tarea_1 = NULL;
  static TaskHandle_t tarea_2 = NULL;
  static TaskHandle_t tarea_3 = NULL;

  /*--------------Tareas-------------*/
  //Tarea 01 : Parpadea led con frecuencia constante
  void tarea01(void *parameter){
    while(1){
      digitalWrite(13,HIGH);
      vTaskDelay(1000/portTICK_PERIOD_MS);
      digitalWrite(13,LOW);
      vTaskDelay(1000/portTICK_PERIOD_MS);
    }
  }

  //Tarea 02 : Parpadea el led con frecuencia variable
  void tarea02(void *parameter){
    while(1){
      digitalWrite(12,HIGH);
      vTaskDelay(periodo/portTICK_PERIOD_MS);
      digitalWrite(12,LOW);
      vTaskDelay(periodo/portTICK_PERIOD_MS);
    }    
  }
  
  //Tarea 03 : Recibe consigna
  void tarea03(void *parameter){
    while(1){
      while (Serial.available() > 0) {
        int inChar = Serial.read();           //Leemos y guardamos en una variable tipo entero el byte recibido
        if (isDigit(inChar)) {                //Si el byte recibido es un digito, es decir, un número, entra en el if
          inString += (char)inChar;           //Guarda el valor del digito concatenandolo a una variable tipo String
        }
        if (inChar == '\n') {                 //Si el byte recibido es un salto de línea entra al if
          periodo = inString.toInt();             //Convertimos la variable tipo String a entero y la guardamos en nuestra variable de periodo tipo entera
          inString = "";                      //Limpiamos la varibale tipo String para la próxima recepción de datos
        }
      }
    }    
  }
void setup() {
  Serial.begin(115200);
  Serial.println("Comunicación serial iniciada");
  pinMode(13,OUTPUT);
  pinMode(12,OUTPUT);

  xTaskCreatePinnedToCore(tarea01,
                          "Tarea 1",
                          1024,
                          NULL,
                          1,
                          &tarea_1,
                          app_cpu);

  xTaskCreatePinnedToCore(tarea02,
                          "Tarea 2",
                          1024,
                          NULL,
                          1,
                          &tarea_2,
                          app_cpu);

  xTaskCreatePinnedToCore(tarea03,
                          "Tarea 3",
                          1024,
                          NULL,
                          1,
                          &tarea_3,
                          app_cpu);
}

void loop() {
}
